<?php

// The content of this file was automatically generated

namespace ProcessOut;

use ProcessOut\ProcessOut;
use ProcessOut\Networking\Request;

class Invoice implements \JsonSerializable
{

    /**
     * ProcessOut's client
     * @var ProcessOut\ProcessOut
     */
    protected $client;

    /**
     * ID of the invoice
     * @var string
     */
    protected $id;

    /**
     * Project to which the invoice belongs
     * @var object
     */
    protected $project;

    /**
     * ID of the project to which the invoice belongs
     * @var string
     */
    protected $projectId;

    /**
     * Transaction generated by the invoice
     * @var object
     */
    protected $transaction;

    /**
     * ID of the transaction generated by the invoice
     * @var string
     */
    protected $transactionId;

    /**
     * Customer linked to the invoice, if any
     * @var object
     */
    protected $customer;

    /**
     * ID of the customer linked to the invoice, if any
     * @var string
     */
    protected $customerId;

    /**
     * Subscription to which the invoice is linked to, if any
     * @var object
     */
    protected $subscription;

    /**
     * ID of the subscription to which the invoice is linked to, if any
     * @var string
     */
    protected $subscriptionId;

    /**
     * Token used to pay the invoice, if any
     * @var object
     */
    protected $token;

    /**
     * ID of the token used to pay the invoice, if any
     * @var string
     */
    protected $tokenId;

    /**
     * Details of the invoice
     * @var list
     */
    protected $details;

    /**
     * Submerchant data of the invoice
     * @var object
     */
    protected $submerchant;

    /**
     * URL to which you may redirect your customer to proceed with the payment
     * @var string
     */
    protected $url;

    /**
     * base64-encoded QR code for the invoice URL
     * @var string
     */
    protected $urlQrcode;

    /**
     * Name of the invoice
     * @var string
     */
    protected $name;

    /**
     * ID of the order for this transaction in merchant's system
     * @var string
     */
    protected $orderId;

    /**
     * Amount to be paid
     * @var decimal
     */
    protected $amount;

    /**
     * Currency of the invoice
     * @var string
     */
    protected $currency;

    /**
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @var string
     */
    protected $merchantInitiatorType;

    /**
     * Statement to be shown on the bank statement of your customer
     * @var string
     */
    protected $statementDescriptor;

    /**
     * Support phone number shown on the customer's bank statement
     * @var string
     */
    protected $statementDescriptorPhone;

    /**
     * City shown on the customer's bank statement
     * @var string
     */
    protected $statementDescriptorCity;

    /**
     * Your company name shown on the customer's bank statement
     * @var string
     */
    protected $statementDescriptorCompany;

    /**
     * URL shown on the customer's bank statement
     * @var string
     */
    protected $statementDescriptorUrl;

    /**
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @var dictionary
     */
    protected $metadata;

    /**
     * Dictionary that transmit specific informations to gateways (key-value pair)
     * @var dictionary
     */
    protected $gatewayData;

    /**
     * URL where the customer will be redirected upon payment
     * @var string
     */
    protected $returnUrl;

    /**
     * URL where the customer will be redirected if the payment was canceled
     * @var string
     */
    protected $cancelUrl;

    /**
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @var string
     */
    protected $webhookUrl;

    /**
     * Define whether the invoice can be captured from the front-end or not
     * @var boolean
     */
    protected $requireBackendCapture;

    /**
     * Define whether or not the invoice is in sandbox environment
     * @var boolean
     */
    protected $sandbox;

    /**
     * Date at which the invoice was created
     * @var string
     */
    protected $createdAt;

    /**
     * Date at which the invoice will expire
     * @var string
     */
    protected $expiresAt;

    /**
     * Risk information
     * @var object
     */
    protected $risk;

    /**
     * Shipping information
     * @var object
     */
    protected $shipping;

    /**
     * Device information
     * @var object
     */
    protected $device;

    /**
     * Contain objects that'll be forwarded to external fraud tools
     * @var object
     */
    protected $externalFraudTools;

    /**
     * (Deprecated - use sca_exemption_reason) Reason provided to request 3DS2 exemption
     * @var string
     */
    protected $exemptionReason3ds2;

    /**
     * Reason provided to request SCA exemption
     * @var string
     */
    protected $scaExemptionReason;

    /**
     * Challenge indicator when requesting 3DS2
     * @var string
     */
    protected $challengeIndicator;

    /**
     * A boolean to indicate if an invoice can have incremental authorizations created for it.
     * @var boolean
     */
    protected $incremental;

    /**
     * Tax for an invoice
     * @var object
     */
    protected $tax;

    /**
     * Payment type
     * @var string
     */
    protected $paymentType;

    /**
     * Native APM data
     * @var object
     */
    protected $nativeApm;

    /**
     * Initiation type of invoice
     * @var string
     */
    protected $initiationType;

    /**
     * Payment intent of invoice
     * @var string
     */
    protected $paymentIntent;

    /**
     * Billing information
     * @var object
     */
    protected $billing;

    /**
     * Flags to bypass unsupported features
     * @var object
     */
    protected $unsupportedFeatureBypass;

    /**
     * A boolean to indicate if an invoice is a verification invoice. This is used to manually create a verification invoice.
     * @var boolean
     */
    protected $verification;

    /**
     * A timestamp to indicate when an auto capture should take place following an authorization. This takes priority over the value sent in the authorization request.
     * @var string
     */
    protected $autoCaptureAt;

    /**
     * Invoice constructor
     * @param ProcessOut\ProcessOut $client
     * @param array|null $prefill
     */
    public function __construct(ProcessOut $client, $prefill = array())
    {
        $this->client = $client;

        $this->fillWithData($prefill);
    }

    
    /**
     * Get Id
     * ID of the invoice
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set Id
     * ID of the invoice
     * @param  string $value
     * @return $this
     */
    public function setId($value)
    {
        $this->id = $value;
        return $this;
    }
    
    /**
     * Get Project
     * Project to which the invoice belongs
     * @return object
     */
    public function getProject()
    {
        return $this->project;
    }

    /**
     * Set Project
     * Project to which the invoice belongs
     * @param  object $value
     * @return $this
     */
    public function setProject($value)
    {
        if (is_object($value))
            $this->project = $value;
        else
        {
            $obj = new Project($this->client);
            $obj->fillWithData($value);
            $this->project = $obj;
        }
        return $this;
    }
    
    /**
     * Get ProjectId
     * ID of the project to which the invoice belongs
     * @return string
     */
    public function getProjectId()
    {
        return $this->projectId;
    }

    /**
     * Set ProjectId
     * ID of the project to which the invoice belongs
     * @param  string $value
     * @return $this
     */
    public function setProjectId($value)
    {
        $this->projectId = $value;
        return $this;
    }
    
    /**
     * Get Transaction
     * Transaction generated by the invoice
     * @return object
     */
    public function getTransaction()
    {
        return $this->transaction;
    }

    /**
     * Set Transaction
     * Transaction generated by the invoice
     * @param  object $value
     * @return $this
     */
    public function setTransaction($value)
    {
        if (is_object($value))
            $this->transaction = $value;
        else
        {
            $obj = new Transaction($this->client);
            $obj->fillWithData($value);
            $this->transaction = $obj;
        }
        return $this;
    }
    
    /**
     * Get TransactionId
     * ID of the transaction generated by the invoice
     * @return string
     */
    public function getTransactionId()
    {
        return $this->transactionId;
    }

    /**
     * Set TransactionId
     * ID of the transaction generated by the invoice
     * @param  string $value
     * @return $this
     */
    public function setTransactionId($value)
    {
        $this->transactionId = $value;
        return $this;
    }
    
    /**
     * Get Customer
     * Customer linked to the invoice, if any
     * @return object
     */
    public function getCustomer()
    {
        return $this->customer;
    }

    /**
     * Set Customer
     * Customer linked to the invoice, if any
     * @param  object $value
     * @return $this
     */
    public function setCustomer($value)
    {
        if (is_object($value))
            $this->customer = $value;
        else
        {
            $obj = new Customer($this->client);
            $obj->fillWithData($value);
            $this->customer = $obj;
        }
        return $this;
    }
    
    /**
     * Get CustomerId
     * ID of the customer linked to the invoice, if any
     * @return string
     */
    public function getCustomerId()
    {
        return $this->customerId;
    }

    /**
     * Set CustomerId
     * ID of the customer linked to the invoice, if any
     * @param  string $value
     * @return $this
     */
    public function setCustomerId($value)
    {
        $this->customerId = $value;
        return $this;
    }
    
    /**
     * Get Subscription
     * Subscription to which the invoice is linked to, if any
     * @return object
     */
    public function getSubscription()
    {
        return $this->subscription;
    }

    /**
     * Set Subscription
     * Subscription to which the invoice is linked to, if any
     * @param  object $value
     * @return $this
     */
    public function setSubscription($value)
    {
        if (is_object($value))
            $this->subscription = $value;
        else
        {
            $obj = new Subscription($this->client);
            $obj->fillWithData($value);
            $this->subscription = $obj;
        }
        return $this;
    }
    
    /**
     * Get SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->subscriptionId;
    }

    /**
     * Set SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @param  string $value
     * @return $this
     */
    public function setSubscriptionId($value)
    {
        $this->subscriptionId = $value;
        return $this;
    }
    
    /**
     * Get Token
     * Token used to pay the invoice, if any
     * @return object
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Set Token
     * Token used to pay the invoice, if any
     * @param  object $value
     * @return $this
     */
    public function setToken($value)
    {
        if (is_object($value))
            $this->token = $value;
        else
        {
            $obj = new Token($this->client);
            $obj->fillWithData($value);
            $this->token = $obj;
        }
        return $this;
    }
    
    /**
     * Get TokenId
     * ID of the token used to pay the invoice, if any
     * @return string
     */
    public function getTokenId()
    {
        return $this->tokenId;
    }

    /**
     * Set TokenId
     * ID of the token used to pay the invoice, if any
     * @param  string $value
     * @return $this
     */
    public function setTokenId($value)
    {
        $this->tokenId = $value;
        return $this;
    }
    
    /**
     * Get Details
     * Details of the invoice
     * @return array
     */
    public function getDetails()
    {
        return $this->details;
    }

    /**
     * Set Details
     * Details of the invoice
     * @param  array $value
     * @return $this
     */
    public function setDetails($value)
    {
        if (count($value) > 0 && is_object($value[0]))
            $this->details = $value;
        else
        {
            $a = array();
            foreach ($value as $v)
            {
                $obj = new InvoiceDetail($this->client);
                $obj->fillWithData($v);
                $a[] = $obj;
            }
            $this->details = $a;
        }
        return $this;
    }
    
    /**
     * Get Submerchant
     * Submerchant data of the invoice
     * @return object
     */
    public function getSubmerchant()
    {
        return $this->submerchant;
    }

    /**
     * Set Submerchant
     * Submerchant data of the invoice
     * @param  object $value
     * @return $this
     */
    public function setSubmerchant($value)
    {
        if (is_object($value))
            $this->submerchant = $value;
        else
        {
            $obj = new InvoiceSubmerchant($this->client);
            $obj->fillWithData($value);
            $this->submerchant = $obj;
        }
        return $this;
    }
    
    /**
     * Get Url
     * URL to which you may redirect your customer to proceed with the payment
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set Url
     * URL to which you may redirect your customer to proceed with the payment
     * @param  string $value
     * @return $this
     */
    public function setUrl($value)
    {
        $this->url = $value;
        return $this;
    }
    
    /**
     * Get UrlQrcode
     * base64-encoded QR code for the invoice URL
     * @return string
     */
    public function getUrlQrcode()
    {
        return $this->urlQrcode;
    }

    /**
     * Set UrlQrcode
     * base64-encoded QR code for the invoice URL
     * @param  string $value
     * @return $this
     */
    public function setUrlQrcode($value)
    {
        $this->urlQrcode = $value;
        return $this;
    }
    
    /**
     * Get Name
     * Name of the invoice
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set Name
     * Name of the invoice
     * @param  string $value
     * @return $this
     */
    public function setName($value)
    {
        $this->name = $value;
        return $this;
    }
    
    /**
     * Get OrderId
     * ID of the order for this transaction in merchant's system
     * @return string
     */
    public function getOrderId()
    {
        return $this->orderId;
    }

    /**
     * Set OrderId
     * ID of the order for this transaction in merchant's system
     * @param  string $value
     * @return $this
     */
    public function setOrderId($value)
    {
        $this->orderId = $value;
        return $this;
    }
    
    /**
     * Get Amount
     * Amount to be paid
     * @return string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Set Amount
     * Amount to be paid
     * @param  string $value
     * @return $this
     */
    public function setAmount($value)
    {
        $this->amount = $value;
        return $this;
    }
    
    /**
     * Get Currency
     * Currency of the invoice
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * Set Currency
     * Currency of the invoice
     * @param  string $value
     * @return $this
     */
    public function setCurrency($value)
    {
        $this->currency = $value;
        return $this;
    }
    
    /**
     * Get MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @return string
     */
    public function getMerchantInitiatorType()
    {
        return $this->merchantInitiatorType;
    }

    /**
     * Set MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @param  string $value
     * @return $this
     */
    public function setMerchantInitiatorType($value)
    {
        $this->merchantInitiatorType = $value;
        return $this;
    }
    
    /**
     * Get StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @return string
     */
    public function getStatementDescriptor()
    {
        return $this->statementDescriptor;
    }

    /**
     * Set StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @param  string $value
     * @return $this
     */
    public function setStatementDescriptor($value)
    {
        $this->statementDescriptor = $value;
        return $this;
    }
    
    /**
     * Get StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @return string
     */
    public function getStatementDescriptorPhone()
    {
        return $this->statementDescriptorPhone;
    }

    /**
     * Set StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @param  string $value
     * @return $this
     */
    public function setStatementDescriptorPhone($value)
    {
        $this->statementDescriptorPhone = $value;
        return $this;
    }
    
    /**
     * Get StatementDescriptorCity
     * City shown on the customer's bank statement
     * @return string
     */
    public function getStatementDescriptorCity()
    {
        return $this->statementDescriptorCity;
    }

    /**
     * Set StatementDescriptorCity
     * City shown on the customer's bank statement
     * @param  string $value
     * @return $this
     */
    public function setStatementDescriptorCity($value)
    {
        $this->statementDescriptorCity = $value;
        return $this;
    }
    
    /**
     * Get StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @return string
     */
    public function getStatementDescriptorCompany()
    {
        return $this->statementDescriptorCompany;
    }

    /**
     * Set StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @param  string $value
     * @return $this
     */
    public function setStatementDescriptorCompany($value)
    {
        $this->statementDescriptorCompany = $value;
        return $this;
    }
    
    /**
     * Get StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @return string
     */
    public function getStatementDescriptorUrl()
    {
        return $this->statementDescriptorUrl;
    }

    /**
     * Set StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @param  string $value
     * @return $this
     */
    public function setStatementDescriptorUrl($value)
    {
        $this->statementDescriptorUrl = $value;
        return $this;
    }
    
    /**
     * Get Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @return array
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @param  array $value
     * @return $this
     */
    public function setMetadata($value)
    {
        $this->metadata = $value;
        return $this;
    }
    
    /**
     * Get GatewayData
     * Dictionary that transmit specific informations to gateways (key-value pair)
     * @return array
     */
    public function getGatewayData()
    {
        return $this->gatewayData;
    }

    /**
     * Set GatewayData
     * Dictionary that transmit specific informations to gateways (key-value pair)
     * @param  array $value
     * @return $this
     */
    public function setGatewayData($value)
    {
        $this->gatewayData = $value;
        return $this;
    }
    
    /**
     * Get ReturnUrl
     * URL where the customer will be redirected upon payment
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->returnUrl;
    }

    /**
     * Set ReturnUrl
     * URL where the customer will be redirected upon payment
     * @param  string $value
     * @return $this
     */
    public function setReturnUrl($value)
    {
        $this->returnUrl = $value;
        return $this;
    }
    
    /**
     * Get CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->cancelUrl;
    }

    /**
     * Set CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @param  string $value
     * @return $this
     */
    public function setCancelUrl($value)
    {
        $this->cancelUrl = $value;
        return $this;
    }
    
    /**
     * Get WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @return string
     */
    public function getWebhookUrl()
    {
        return $this->webhookUrl;
    }

    /**
     * Set WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @param  string $value
     * @return $this
     */
    public function setWebhookUrl($value)
    {
        $this->webhookUrl = $value;
        return $this;
    }
    
    /**
     * Get RequireBackendCapture
     * Define whether the invoice can be captured from the front-end or not
     * @return bool
     */
    public function getRequireBackendCapture()
    {
        return $this->requireBackendCapture;
    }

    /**
     * Set RequireBackendCapture
     * Define whether the invoice can be captured from the front-end or not
     * @param  bool $value
     * @return $this
     */
    public function setRequireBackendCapture($value)
    {
        $this->requireBackendCapture = $value;
        return $this;
    }
    
    /**
     * Get Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @return bool
     */
    public function getSandbox()
    {
        return $this->sandbox;
    }

    /**
     * Set Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @param  bool $value
     * @return $this
     */
    public function setSandbox($value)
    {
        $this->sandbox = $value;
        return $this;
    }
    
    /**
     * Get CreatedAt
     * Date at which the invoice was created
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set CreatedAt
     * Date at which the invoice was created
     * @param  string $value
     * @return $this
     */
    public function setCreatedAt($value)
    {
        $this->createdAt = $value;
        return $this;
    }
    
    /**
     * Get ExpiresAt
     * Date at which the invoice will expire
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->expiresAt;
    }

    /**
     * Set ExpiresAt
     * Date at which the invoice will expire
     * @param  string $value
     * @return $this
     */
    public function setExpiresAt($value)
    {
        $this->expiresAt = $value;
        return $this;
    }
    
    /**
     * Get Risk
     * Risk information
     * @return object
     */
    public function getRisk()
    {
        return $this->risk;
    }

    /**
     * Set Risk
     * Risk information
     * @param  object $value
     * @return $this
     */
    public function setRisk($value)
    {
        if (is_object($value))
            $this->risk = $value;
        else
        {
            $obj = new InvoiceRisk($this->client);
            $obj->fillWithData($value);
            $this->risk = $obj;
        }
        return $this;
    }
    
    /**
     * Get Shipping
     * Shipping information
     * @return object
     */
    public function getShipping()
    {
        return $this->shipping;
    }

    /**
     * Set Shipping
     * Shipping information
     * @param  object $value
     * @return $this
     */
    public function setShipping($value)
    {
        if (is_object($value))
            $this->shipping = $value;
        else
        {
            $obj = new InvoiceShipping($this->client);
            $obj->fillWithData($value);
            $this->shipping = $obj;
        }
        return $this;
    }
    
    /**
     * Get Device
     * Device information
     * @return object
     */
    public function getDevice()
    {
        return $this->device;
    }

    /**
     * Set Device
     * Device information
     * @param  object $value
     * @return $this
     */
    public function setDevice($value)
    {
        if (is_object($value))
            $this->device = $value;
        else
        {
            $obj = new InvoiceDevice($this->client);
            $obj->fillWithData($value);
            $this->device = $obj;
        }
        return $this;
    }
    
    /**
     * Get ExternalFraudTools
     * Contain objects that'll be forwarded to external fraud tools
     * @return object
     */
    public function getExternalFraudTools()
    {
        return $this->externalFraudTools;
    }

    /**
     * Set ExternalFraudTools
     * Contain objects that'll be forwarded to external fraud tools
     * @param  object $value
     * @return $this
     */
    public function setExternalFraudTools($value)
    {
        if (is_object($value))
            $this->externalFraudTools = $value;
        else
        {
            $obj = new InvoiceExternalFraudTools($this->client);
            $obj->fillWithData($value);
            $this->externalFraudTools = $obj;
        }
        return $this;
    }
    
    /**
     * Get ExemptionReason3ds2
     * (Deprecated - use sca_exemption_reason) Reason provided to request 3DS2 exemption
     * @return string
     */
    public function getExemptionReason3ds2()
    {
        return $this->exemptionReason3ds2;
    }

    /**
     * Set ExemptionReason3ds2
     * (Deprecated - use sca_exemption_reason) Reason provided to request 3DS2 exemption
     * @param  string $value
     * @return $this
     */
    public function setExemptionReason3ds2($value)
    {
        $this->exemptionReason3ds2 = $value;
        return $this;
    }
    
    /**
     * Get ScaExemptionReason
     * Reason provided to request SCA exemption
     * @return string
     */
    public function getScaExemptionReason()
    {
        return $this->scaExemptionReason;
    }

    /**
     * Set ScaExemptionReason
     * Reason provided to request SCA exemption
     * @param  string $value
     * @return $this
     */
    public function setScaExemptionReason($value)
    {
        $this->scaExemptionReason = $value;
        return $this;
    }
    
    /**
     * Get ChallengeIndicator
     * Challenge indicator when requesting 3DS2
     * @return string
     */
    public function getChallengeIndicator()
    {
        return $this->challengeIndicator;
    }

    /**
     * Set ChallengeIndicator
     * Challenge indicator when requesting 3DS2
     * @param  string $value
     * @return $this
     */
    public function setChallengeIndicator($value)
    {
        $this->challengeIndicator = $value;
        return $this;
    }
    
    /**
     * Get Incremental
     * A boolean to indicate if an invoice can have incremental authorizations created for it.
     * @return bool
     */
    public function getIncremental()
    {
        return $this->incremental;
    }

    /**
     * Set Incremental
     * A boolean to indicate if an invoice can have incremental authorizations created for it.
     * @param  bool $value
     * @return $this
     */
    public function setIncremental($value)
    {
        $this->incremental = $value;
        return $this;
    }
    
    /**
     * Get Tax
     * Tax for an invoice
     * @return object
     */
    public function getTax()
    {
        return $this->tax;
    }

    /**
     * Set Tax
     * Tax for an invoice
     * @param  object $value
     * @return $this
     */
    public function setTax($value)
    {
        if (is_object($value))
            $this->tax = $value;
        else
        {
            $obj = new InvoiceTax($this->client);
            $obj->fillWithData($value);
            $this->tax = $obj;
        }
        return $this;
    }
    
    /**
     * Get PaymentType
     * Payment type
     * @return string
     */
    public function getPaymentType()
    {
        return $this->paymentType;
    }

    /**
     * Set PaymentType
     * Payment type
     * @param  string $value
     * @return $this
     */
    public function setPaymentType($value)
    {
        $this->paymentType = $value;
        return $this;
    }
    
    /**
     * Get NativeApm
     * Native APM data
     * @return object
     */
    public function getNativeApm()
    {
        return $this->nativeApm;
    }

    /**
     * Set NativeApm
     * Native APM data
     * @param  object $value
     * @return $this
     */
    public function setNativeApm($value)
    {
        if (is_object($value))
            $this->nativeApm = $value;
        else
        {
            $obj = new NativeAPMRequest($this->client);
            $obj->fillWithData($value);
            $this->nativeApm = $obj;
        }
        return $this;
    }
    
    /**
     * Get InitiationType
     * Initiation type of invoice
     * @return string
     */
    public function getInitiationType()
    {
        return $this->initiationType;
    }

    /**
     * Set InitiationType
     * Initiation type of invoice
     * @param  string $value
     * @return $this
     */
    public function setInitiationType($value)
    {
        $this->initiationType = $value;
        return $this;
    }
    
    /**
     * Get PaymentIntent
     * Payment intent of invoice
     * @return string
     */
    public function getPaymentIntent()
    {
        return $this->paymentIntent;
    }

    /**
     * Set PaymentIntent
     * Payment intent of invoice
     * @param  string $value
     * @return $this
     */
    public function setPaymentIntent($value)
    {
        $this->paymentIntent = $value;
        return $this;
    }
    
    /**
     * Get Billing
     * Billing information
     * @return object
     */
    public function getBilling()
    {
        return $this->billing;
    }

    /**
     * Set Billing
     * Billing information
     * @param  object $value
     * @return $this
     */
    public function setBilling($value)
    {
        if (is_object($value))
            $this->billing = $value;
        else
        {
            $obj = new InvoiceBilling($this->client);
            $obj->fillWithData($value);
            $this->billing = $obj;
        }
        return $this;
    }
    
    /**
     * Get UnsupportedFeatureBypass
     * Flags to bypass unsupported features
     * @return object
     */
    public function getUnsupportedFeatureBypass()
    {
        return $this->unsupportedFeatureBypass;
    }

    /**
     * Set UnsupportedFeatureBypass
     * Flags to bypass unsupported features
     * @param  object $value
     * @return $this
     */
    public function setUnsupportedFeatureBypass($value)
    {
        if (is_object($value))
            $this->unsupportedFeatureBypass = $value;
        else
        {
            $obj = new UnsupportedFeatureBypass($this->client);
            $obj->fillWithData($value);
            $this->unsupportedFeatureBypass = $obj;
        }
        return $this;
    }
    
    /**
     * Get Verification
     * A boolean to indicate if an invoice is a verification invoice. This is used to manually create a verification invoice.
     * @return bool
     */
    public function getVerification()
    {
        return $this->verification;
    }

    /**
     * Set Verification
     * A boolean to indicate if an invoice is a verification invoice. This is used to manually create a verification invoice.
     * @param  bool $value
     * @return $this
     */
    public function setVerification($value)
    {
        $this->verification = $value;
        return $this;
    }
    
    /**
     * Get AutoCaptureAt
     * A timestamp to indicate when an auto capture should take place following an authorization. This takes priority over the value sent in the authorization request.
     * @return string
     */
    public function getAutoCaptureAt()
    {
        return $this->autoCaptureAt;
    }

    /**
     * Set AutoCaptureAt
     * A timestamp to indicate when an auto capture should take place following an authorization. This takes priority over the value sent in the authorization request.
     * @param  string $value
     * @return $this
     */
    public function setAutoCaptureAt($value)
    {
        $this->autoCaptureAt = $value;
        return $this;
    }
    

    /**
     * Fills the current object with the new values pulled from the data
     * @param  array $data
     * @return Invoice
     */
    public function fillWithData($data)
    {
        if(! empty($data['id']))
            $this->setId($data['id']);

        if(! empty($data['project']))
            $this->setProject($data['project']);

        if(! empty($data['project_id']))
            $this->setProjectId($data['project_id']);

        if(! empty($data['transaction']))
            $this->setTransaction($data['transaction']);

        if(! empty($data['transaction_id']))
            $this->setTransactionId($data['transaction_id']);

        if(! empty($data['customer']))
            $this->setCustomer($data['customer']);

        if(! empty($data['customer_id']))
            $this->setCustomerId($data['customer_id']);

        if(! empty($data['subscription']))
            $this->setSubscription($data['subscription']);

        if(! empty($data['subscription_id']))
            $this->setSubscriptionId($data['subscription_id']);

        if(! empty($data['token']))
            $this->setToken($data['token']);

        if(! empty($data['token_id']))
            $this->setTokenId($data['token_id']);

        if(! empty($data['details']))
            $this->setDetails($data['details']);

        if(! empty($data['submerchant']))
            $this->setSubmerchant($data['submerchant']);

        if(! empty($data['url']))
            $this->setUrl($data['url']);

        if(! empty($data['url_qrcode']))
            $this->setUrlQrcode($data['url_qrcode']);

        if(! empty($data['name']))
            $this->setName($data['name']);

        if(! empty($data['order_id']))
            $this->setOrderId($data['order_id']);

        if(! empty($data['amount']))
            $this->setAmount($data['amount']);

        if(! empty($data['currency']))
            $this->setCurrency($data['currency']);

        if(! empty($data['merchant_initiator_type']))
            $this->setMerchantInitiatorType($data['merchant_initiator_type']);

        if(! empty($data['statement_descriptor']))
            $this->setStatementDescriptor($data['statement_descriptor']);

        if(! empty($data['statement_descriptor_phone']))
            $this->setStatementDescriptorPhone($data['statement_descriptor_phone']);

        if(! empty($data['statement_descriptor_city']))
            $this->setStatementDescriptorCity($data['statement_descriptor_city']);

        if(! empty($data['statement_descriptor_company']))
            $this->setStatementDescriptorCompany($data['statement_descriptor_company']);

        if(! empty($data['statement_descriptor_url']))
            $this->setStatementDescriptorUrl($data['statement_descriptor_url']);

        if(! empty($data['metadata']))
            $this->setMetadata($data['metadata']);

        if(! empty($data['gateway_data']))
            $this->setGatewayData($data['gateway_data']);

        if(! empty($data['return_url']))
            $this->setReturnUrl($data['return_url']);

        if(! empty($data['cancel_url']))
            $this->setCancelUrl($data['cancel_url']);

        if(! empty($data['webhook_url']))
            $this->setWebhookUrl($data['webhook_url']);

        if(! empty($data['require_backend_capture']))
            $this->setRequireBackendCapture($data['require_backend_capture']);

        if(! empty($data['sandbox']))
            $this->setSandbox($data['sandbox']);

        if(! empty($data['created_at']))
            $this->setCreatedAt($data['created_at']);

        if(! empty($data['expires_at']))
            $this->setExpiresAt($data['expires_at']);

        if(! empty($data['risk']))
            $this->setRisk($data['risk']);

        if(! empty($data['shipping']))
            $this->setShipping($data['shipping']);

        if(! empty($data['device']))
            $this->setDevice($data['device']);

        if(! empty($data['external_fraud_tools']))
            $this->setExternalFraudTools($data['external_fraud_tools']);

        if(! empty($data['exemption_reason_3ds2']))
            $this->setExemptionReason3ds2($data['exemption_reason_3ds2']);

        if(! empty($data['sca_exemption_reason']))
            $this->setScaExemptionReason($data['sca_exemption_reason']);

        if(! empty($data['challenge_indicator']))
            $this->setChallengeIndicator($data['challenge_indicator']);

        if(! empty($data['incremental']))
            $this->setIncremental($data['incremental']);

        if(! empty($data['tax']))
            $this->setTax($data['tax']);

        if(! empty($data['payment_type']))
            $this->setPaymentType($data['payment_type']);

        if(! empty($data['native_apm']))
            $this->setNativeApm($data['native_apm']);

        if(! empty($data['initiation_type']))
            $this->setInitiationType($data['initiation_type']);

        if(! empty($data['payment_intent']))
            $this->setPaymentIntent($data['payment_intent']);

        if(! empty($data['billing']))
            $this->setBilling($data['billing']);

        if(! empty($data['unsupported_feature_bypass']))
            $this->setUnsupportedFeatureBypass($data['unsupported_feature_bypass']);

        if(! empty($data['verification']))
            $this->setVerification($data['verification']);

        if(! empty($data['auto_capture_at']))
            $this->setAutoCaptureAt($data['auto_capture_at']);

        return $this;
    }

    /**
     * Implements the JsonSerializable interface
     * @return object
     */
    public function jsonSerialize() {
        return array(
            "id" => $this->getId(),
            "project" => $this->getProject(),
            "project_id" => $this->getProjectId(),
            "transaction" => $this->getTransaction(),
            "transaction_id" => $this->getTransactionId(),
            "customer" => $this->getCustomer(),
            "customer_id" => $this->getCustomerId(),
            "subscription" => $this->getSubscription(),
            "subscription_id" => $this->getSubscriptionId(),
            "token" => $this->getToken(),
            "token_id" => $this->getTokenId(),
            "details" => $this->getDetails(),
            "submerchant" => $this->getSubmerchant(),
            "url" => $this->getUrl(),
            "url_qrcode" => $this->getUrlQrcode(),
            "name" => $this->getName(),
            "order_id" => $this->getOrderId(),
            "amount" => $this->getAmount(),
            "currency" => $this->getCurrency(),
            "merchant_initiator_type" => $this->getMerchantInitiatorType(),
            "statement_descriptor" => $this->getStatementDescriptor(),
            "statement_descriptor_phone" => $this->getStatementDescriptorPhone(),
            "statement_descriptor_city" => $this->getStatementDescriptorCity(),
            "statement_descriptor_company" => $this->getStatementDescriptorCompany(),
            "statement_descriptor_url" => $this->getStatementDescriptorUrl(),
            "metadata" => $this->getMetadata(),
            "gateway_data" => $this->getGatewayData(),
            "return_url" => $this->getReturnUrl(),
            "cancel_url" => $this->getCancelUrl(),
            "webhook_url" => $this->getWebhookUrl(),
            "require_backend_capture" => $this->getRequireBackendCapture(),
            "sandbox" => $this->getSandbox(),
            "created_at" => $this->getCreatedAt(),
            "expires_at" => $this->getExpiresAt(),
            "risk" => $this->getRisk(),
            "shipping" => $this->getShipping(),
            "device" => $this->getDevice(),
            "external_fraud_tools" => $this->getExternalFraudTools(),
            "exemption_reason_3ds2" => $this->getExemptionReason3ds2(),
            "sca_exemption_reason" => $this->getScaExemptionReason(),
            "challenge_indicator" => $this->getChallengeIndicator(),
            "incremental" => $this->getIncremental(),
            "tax" => $this->getTax(),
            "payment_type" => $this->getPaymentType(),
            "native_apm" => $this->getNativeApm(),
            "initiation_type" => $this->getInitiationType(),
            "payment_intent" => $this->getPaymentIntent(),
            "billing" => $this->getBilling(),
            "unsupported_feature_bypass" => $this->getUnsupportedFeatureBypass(),
            "verification" => $this->getVerification(),
            "auto_capture_at" => $this->getAutoCaptureAt(),
        );
    }

    
    /**
     * Create an incremental authorization
     * @param string $amount
     * @param array $options
     * @return Transaction
     */
    public function incrementAuthorization($amount, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/increment_authorization";

        $data = array(
            "metadata" => (!empty($options["metadata"])) ? $options["metadata"] : null, 
            "amount" => $amount
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field transaction
        $body = $response->getBody();
        $body = $body['transaction'];
        $transaction = new Transaction($this->client);
        $returnValues['transaction'] = $transaction->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Authorize the invoice using the given source (customer or token)
     * @param string $source
     * @param array $options
     * @return array
     */
    public function authorize($source, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/authorize";

        $data = array(
            "device" => $this->getDevice(), 
            "incremental" => $this->getIncremental(), 
            "synchronous" => (!empty($options["synchronous"])) ? $options["synchronous"] : null, 
            "retry_drop_liability_shift" => (!empty($options["retry_drop_liability_shift"])) ? $options["retry_drop_liability_shift"] : null, 
            "capture_amount" => (!empty($options["capture_amount"])) ? $options["capture_amount"] : null, 
            "enable_three_d_s_2" => (!empty($options["enable_three_d_s_2"])) ? $options["enable_three_d_s_2"] : null, 
            "allow_fallback_to_sale" => (!empty($options["allow_fallback_to_sale"])) ? $options["allow_fallback_to_sale"] : null, 
            "auto_capture_at" => (!empty($options["auto_capture_at"])) ? $options["auto_capture_at"] : null, 
            "metadata" => (!empty($options["metadata"])) ? $options["metadata"] : null, 
            "override_mac_blocking" => (!empty($options["override_mac_blocking"])) ? $options["override_mac_blocking"] : null, 
            "external_three_d_s" => (!empty($options["external_three_d_s"])) ? $options["external_three_d_s"] : null, 
            "save_source" => (!empty($options["save_source"])) ? $options["save_source"] : null, 
            "source" => $source
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field transaction
        $body = $response->getBody();
        $body = $body['transaction'];
        $transaction = new Transaction($this->client);
        $returnValues['transaction'] = $transaction->fillWithData($body);
                
        // Handling for field customer_action
        $body = $response->getBody();
        $body = $body['customer_action'];
        $customerAction = new CustomerAction($this->client);
        $returnValues['customerAction'] = $customerAction->fillWithData($body);
                
        
        return (object) $returnValues;
    }
    
    /**
     * Capture the invoice using the given source (customer or token)
     * @param string $source
     * @param array $options
     * @return array
     */
    public function capture($source, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/capture";

        $data = array(
            "device" => $this->getDevice(), 
            "incremental" => $this->getIncremental(), 
            "authorize_only" => (!empty($options["authorize_only"])) ? $options["authorize_only"] : null, 
            "synchronous" => (!empty($options["synchronous"])) ? $options["synchronous"] : null, 
            "retry_drop_liability_shift" => (!empty($options["retry_drop_liability_shift"])) ? $options["retry_drop_liability_shift"] : null, 
            "capture_amount" => (!empty($options["capture_amount"])) ? $options["capture_amount"] : null, 
            "auto_capture_at" => (!empty($options["auto_capture_at"])) ? $options["auto_capture_at"] : null, 
            "enable_three_d_s_2" => (!empty($options["enable_three_d_s_2"])) ? $options["enable_three_d_s_2"] : null, 
            "metadata" => (!empty($options["metadata"])) ? $options["metadata"] : null, 
            "capture_statement_descriptor" => (!empty($options["capture_statement_descriptor"])) ? $options["capture_statement_descriptor"] : null, 
            "override_mac_blocking" => (!empty($options["override_mac_blocking"])) ? $options["override_mac_blocking"] : null, 
            "external_three_d_s" => (!empty($options["external_three_d_s"])) ? $options["external_three_d_s"] : null, 
            "save_source" => (!empty($options["save_source"])) ? $options["save_source"] : null, 
            "source" => $source
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field transaction
        $body = $response->getBody();
        $body = $body['transaction'];
        $transaction = new Transaction($this->client);
        $returnValues['transaction'] = $transaction->fillWithData($body);
                
        // Handling for field customer_action
        $body = $response->getBody();
        $body = $body['customer_action'];
        $customerAction = new CustomerAction($this->client);
        $returnValues['customerAction'] = $customerAction->fillWithData($body);
                
        
        return (object) $returnValues;
    }
    
    /**
     * Get the customer linked to the invoice.
     * @param array $options
     * @return Customer
     */
    public function fetchCustomer($options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/customers";

        $data = array(

        );

        $response = $request->get($path, $data, $options);
        $returnValues = array();

        
        // Handling for field customer
        $body = $response->getBody();
        $body = $body['customer'];
        $customer = new Customer($this->client);
        $returnValues['customer'] = $customer->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Assign a customer to the invoice.
     * @param string $customerId
     * @param array $options
     * @return Customer
     */
    public function assignCustomer($customerId, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/customers";

        $data = array(
            "customer_id" => $customerId
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field customer
        $body = $response->getBody();
        $body = $body['customer'];
        $customer = new Customer($this->client);
        $returnValues['customer'] = $customer->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Process the payout invoice using the given source (customer or token)
     * @param string $gatewayConfigurationId
     * @param string $source
     * @param array $options
     * @return Transaction
     */
    public function payout($gatewayConfigurationId, $source, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/payout";

        $data = array(
            "force_gateway_configuration_id" => (!empty($options["force_gateway_configuration_id"])) ? $options["force_gateway_configuration_id"] : null, 
            "gateway_configuration_id" => $gatewayConfigurationId, 
            "source" => $source
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field transaction
        $body = $response->getBody();
        $body = $body['transaction'];
        $transaction = new Transaction($this->client);
        $returnValues['transaction'] = $transaction->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Fetches the Native APM payment
     * @param string $invoiceId
     * @param string $gatewayConfigurationId
     * @param array $options
     * @return NativeAPMTransactionDetails
     */
    public function showNativePaymentTransaction($invoiceId, $gatewayConfigurationId, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($invoiceId) . "/native-payment/" . urlencode($gatewayConfigurationId) . "";

        $data = array(

        );

        $response = $request->get($path, $data, $options);
        $returnValues = array();

        
        // Handling for field native_apm
        $body = $response->getBody();
        $body = $body['native_apm'];
        $nativeAPMTransactionDetails = new NativeAPMTransactionDetails($this->client);
        $returnValues['nativeAPMTransactionDetails'] = $nativeAPMTransactionDetails->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Process the Native APM payment flow
     * @param string $invoiceId
     * @param array $options
     * @return array
     */
    public function processNativePayment($invoiceId, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($invoiceId) . "/native-payment";

        $data = array(
            "gateway_configuration_id" => (!empty($options["gateway_configuration_id"])) ? $options["gateway_configuration_id"] : null, 
            "native_apm" => (!empty($options["native_apm"])) ? $options["native_apm"] : null
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field transaction
        $body = $response->getBody();
        $body = $body['transaction'];
        $transaction = new Transaction($this->client);
        $returnValues['transaction'] = $transaction->fillWithData($body);
                
        // Handling for field native_apm
        $body = $response->getBody();
        $body = $body['native_apm'];
        $nativeAPMResponse = new NativeAPMResponse($this->client);
        $returnValues['nativeAPMResponse'] = $nativeAPMResponse->fillWithData($body);
                
        
        return (object) $returnValues;
    }
    
    /**
     * Initiate a 3-D Secure authentication
     * @param string $source
     * @param array $options
     * @return CustomerAction
     */
    public function initiateThreeDS($source, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/three-d-s";

        $data = array(
            "enable_three_d_s_2" => (!empty($options["enable_three_d_s_2"])) ? $options["enable_three_d_s_2"] : null, 
            "source" => $source
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field customer_action
        $body = $response->getBody();
        $body = $body['customer_action'];
        $customerAction = new CustomerAction($this->client);
        $returnValues['customerAction'] = $customerAction->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Get the transaction of the invoice.
     * @param array $options
     * @return Transaction
     */
    public function fetchTransaction($options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/transactions";

        $data = array(

        );

        $response = $request->get($path, $data, $options);
        $returnValues = array();

        
        // Handling for field transaction
        $body = $response->getBody();
        $body = $body['transaction'];
        $transaction = new Transaction($this->client);
        $returnValues['transaction'] = $transaction->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Void the invoice
     * @param array $options
     * @return Transaction
     */
    public function void($options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($this->getId()) . "/void";

        $data = array(
            "metadata" => (!empty($options["metadata"])) ? $options["metadata"] : null, 
            "amount" => (!empty($options["amount"])) ? $options["amount"] : null
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field transaction
        $body = $response->getBody();
        $body = $body['transaction'];
        $transaction = new Transaction($this->client);
        $returnValues['transaction'] = $transaction->fillWithData($body);
                
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Get all the invoices.
     * @param array $options
     * @return array
     */
    public function all($options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices";

        $data = array(

        );

        $response = $request->get($path, $data, $options);
        $returnValues = array();

        
        // Handling for field invoices
        $a    = array();
        $body = $response->getBody();
        foreach($body['invoices'] as $v)
        {
            $tmp = new Invoice($this->client);
            $tmp->fillWithData($v);
            $a[] = $tmp;
        }
        $returnValues['Invoices'] = $a;
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Create a new invoice.
     * @param array $options
     * @return $this
     */
    public function create($options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices";

        $data = array(
            "customer_id" => $this->getCustomerId(), 
            "name" => $this->getName(), 
            "order_id" => $this->getOrderId(), 
            "amount" => $this->getAmount(), 
            "currency" => $this->getCurrency(), 
            "metadata" => $this->getMetadata(), 
            "details" => $this->getDetails(), 
            "submerchant" => $this->getSubmerchant(), 
            "exemption_reason_3ds2" => $this->getExemptionReason3ds2(), 
            "sca_exemption_reason" => $this->getScaExemptionReason(), 
            "challenge_indicator" => $this->getChallengeIndicator(), 
            "gateway_data" => $this->getGatewayData(), 
            "merchant_initiator_type" => $this->getMerchantInitiatorType(), 
            "initiation_type" => $this->getInitiationType(), 
            "payment_intent" => $this->getPaymentIntent(), 
            "statement_descriptor" => $this->getStatementDescriptor(), 
            "statement_descriptor_phone" => $this->getStatementDescriptorPhone(), 
            "statement_descriptor_city" => $this->getStatementDescriptorCity(), 
            "statement_descriptor_company" => $this->getStatementDescriptorCompany(), 
            "statement_descriptor_url" => $this->getStatementDescriptorUrl(), 
            "return_url" => $this->getReturnUrl(), 
            "cancel_url" => $this->getCancelUrl(), 
            "webhook_url" => $this->getWebhookUrl(), 
            "risk" => $this->getRisk(), 
            "shipping" => $this->getShipping(), 
            "device" => $this->getDevice(), 
            "require_backend_capture" => $this->getRequireBackendCapture(), 
            "external_fraud_tools" => $this->getExternalFraudTools(), 
            "tax" => $this->getTax(), 
            "payment_type" => $this->getPaymentType(), 
            "billing" => $this->getBilling(), 
            "unsupported_feature_bypass" => $this->getUnsupportedFeatureBypass(), 
            "verification" => $this->getVerification(), 
            "auto_capture_at" => $this->getAutoCaptureAt(), 
            "expires_at" => $this->getExpiresAt()
        );

        $response = $request->post($path, $data, $options);
        $returnValues = array();

        
        // Handling for field invoice
        $body = $response->getBody();
        $body = $body['invoice'];
        $returnValues['create'] = $this->fillWithData($body);
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Find an invoice by its ID.
     * @param string $invoiceId
     * @param array $options
     * @return $this
     */
    public function find($invoiceId, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($invoiceId) . "";

        $data = array(

        );

        $response = $request->get($path, $data, $options);
        $returnValues = array();

        
        // Handling for field invoice
        $body = $response->getBody();
        $body = $body['invoice'];
        $returnValues['find'] = $this->fillWithData($body);
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Delete an invoice by its ID. Only invoices that have not been used yet can be deleted.
     * @param string $invoiceId
     * @param array $options
     * @return bool
     */
    public function delete($invoiceId, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($invoiceId) . "";

        $data = array(

        );

        $response = $request->delete($path, $data, $options);
        $returnValues = array();

        $returnValues['success'] = $response->isSuccess();
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Refresh invoice by its ID with PSP.
     * @param string $invoiceId
     * @param array $options
     * @return $this
     */
    public function syncWithPsp($invoiceId, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($invoiceId) . "/sync-with-psp";

        $data = array(

        );

        $response = $request->put($path, $data, $options);
        $returnValues = array();

        
        // Handling for field invoice
        $body = $response->getBody();
        $body = $body['invoice'];
        $returnValues['syncWithPsp'] = $this->fillWithData($body);
        
        return array_values($returnValues)[0];
    }
    
    /**
     * Update invoice by its ID.
     * @param string $invoiceId
     * @param array $options
     * @return $this
     */
    public function update($invoiceId, $options = array())
    {
        $this->fillWithData($options);

        $request = new Request($this->client);
        $path    = "/invoices/" . urlencode($invoiceId) . "";

        $data = array(
            "amount" => $this->getAmount(), 
            "tax" => $this->getTax(), 
            "details" => $this->getDetails(), 
            "shipping" => $this->getShipping()
        );

        $response = $request->put($path, $data, $options);
        $returnValues = array();

        
        // Handling for field invoice
        $body = $response->getBody();
        $body = $body['invoice'];
        $returnValues['update'] = $this->fillWithData($body);
        
        return array_values($returnValues)[0];
    }
    
}
